{"version":3,"sources":["sound/alarm.mp3","components/Timer/Timer.jsx","components/InputCountdown/InputCountdown.jsx","components/Countdown/Countdown.jsx","components/App/App.jsx"],"names":["module","exports","Timer","props","timerControl","delay","state","isPlay","timeInMs","startFromMs","startTime","Date","now","timerId","setInterval","setState","clearInterval","onResetClick","onStartClick","timeView","time","digits","toString","slice","calculateTime","timeInSec","ms","Math","floor","sec","min","this","btnText","className","type","onClick","danger","React","Component","InputCountdown","setTimeValue","updateTime","onChangeMinField","minutes","maxTimeInMin","newTimeInSec","trunc","onChangeSecField","seconds","currentMin","onSliderChange","sliderFormatTip","maxSeconds","sliderStep","maxSliderInSec","startTimeInSec","isStarted","name","defaultValue","max","value","onChange","disabled","tipFormatter","step","defaultProps","timerSound","require","Countdown","countdown","countdownId","play","onChangeTime","getProgress","onePercent","Audio","progress","gutter","span","strokeLinecap","percent","TabPane","Tabs","App","defaultActiveKey","tab","key","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.96e64415.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.b3631705.mp3\";","import React from 'react';\nimport { Button, Space } from 'antd';\nimport './Timer.scss';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeInMs: 0,\n      isPlay: false,\n      startFromMs: 0,\n    };\n    this.timerId = null;\n  }\n\n  timerControl = (delay) => {\n    const { isPlay, timeInMs, startFromMs } = this.state;\n    const startTime = Date.now();\n\n    if (!isPlay) {\n      this.timerId = setInterval(() => {\n        this.setState({ timeInMs: Date.now() + startFromMs - startTime });\n      }, delay);\n    }\n\n    if (isPlay) {\n      clearInterval(this.timerId);\n      this.setState({ isPlay: false, startFromMs: timeInMs });\n    }\n  };\n\n  onResetClick = () => {\n    clearInterval(this.timerId);\n    this.setState({ isPlay: false, timeInMs: 0, startFromMs: 0 });\n  };\n\n  onStartClick = () => {\n    const delay = 10;\n    this.setState(({ isPlay }) => ({ isPlay: !isPlay }));\n    this.timerControl(delay);\n  };\n\n  timeView = (time, digits) => {\n    const result = ((time < 10) ? `0${time}` : time);\n    return result.toString().slice(-digits);\n  };\n\n  calculateTime = (timeInSec) => {\n    const ms = Math.floor(timeInSec / 10);\n    let time = timeInSec;\n    time = (time - (time % 1000)) / 1000;\n    const sec = time % 60;\n    time = (time - sec) / 60;\n    const min = time % 60;\n    return `${this.timeView(min)}:${this.timeView(sec)}:${this.timeView(ms, 2)}`;\n  };\n\n  render() {\n    const { timeInMs, isPlay } = this.state;\n    const btnText = isPlay ? 'Pause' : 'Play';\n    return (\n      <div>\n        <div className=\"timer__value\">\n          { this.calculateTime(timeInMs) }\n        </div>\n        <div className=\"timer\">\n          <Space>\n            <Button type=\"primary\" className=\"timer__btn\" onClick={this.onStartClick}>{btnText}</Button>\n            <Button type=\"primary\" className=\"timer__btn\" danger onClick={this.onResetClick}>Reset</Button>\n          </Space>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Slider, InputNumber, Space } from 'antd';\n\nclass InputCountdown extends React.Component {\n  constructor(props) {\n    super(props);\n    const { maxTimeInMin, maxSeconds, sliderStep } = this.props;\n    this.maxTimeInMin = maxTimeInMin;\n    this.maxSeconds = maxSeconds;\n    this.sliderStep = sliderStep;\n  }\n\n  setTimeValue = (timeInSec) => {\n    const { updateTime } = this.props;\n    if (updateTime) updateTime(timeInSec);\n  };\n\n  onChangeMinField = (minutes) => {\n    const min = minutes || 0;\n    const { maxTimeInMin, timeInSec } = this.props;\n    const currentMin = Math.trunc(timeInSec / 60);\n    const currentSec = timeInSec - currentMin * 60;\n    let newTimeInSec = min * 60 + currentSec;\n    if (min >= maxTimeInMin) {\n      newTimeInSec = maxTimeInMin * 60;\n    }\n    this.setTimeValue(newTimeInSec);\n  };\n\n  onChangeSecField = (seconds) => {\n    const { maxTimeInMin, timeInSec } = this.props;\n    const sec = seconds || 0;\n    const currentMin = Math.trunc(timeInSec / 60);\n    let newTimeInSec = currentMin * 60 + sec;\n\n    if (currentMin >= maxTimeInMin) {\n      newTimeInSec = maxTimeInMin * 60;\n    }\n    this.setTimeValue(newTimeInSec);\n  };\n\n  onSliderChange = (timeInSec) => this.setTimeValue(timeInSec);\n\n  timeView = (time) => ((time < 10) ? `0${time}` : time);\n\n  sliderFormatTip = (timeInSec) => {\n    const minutes = Math.trunc(timeInSec / 60);\n    const seconds = timeInSec - minutes * 60;\n    return `${this.timeView(minutes)}:${this.timeView(seconds)}`;\n  };\n\n  render() {\n    const {\n      maxSliderInSec,\n      timeInSec,\n      startTimeInSec,\n      isStarted,\n    } = this.props;\n\n    const time = (isStarted) ? startTimeInSec : timeInSec;\n    const minutes = (startTimeInSec > 0) ? Math.trunc(time / 60) : 0;\n    const seconds = time - minutes * 60;\n\n    return (\n      <div>\n        <Space>\n          <span className=\"\">Minutes:</span>\n          <InputNumber\n            name=\"minField\"\n            defaultValue={0}\n            type=\"number\"\n            max={this.maxTimeInMin}\n            min={0}\n            value={minutes}\n            onChange={this.onChangeMinField}\n            disabled={isStarted}\n          />\n          <span className=\"\">Seconds:</span>\n          <InputNumber\n            name=\"secField\"\n            defaultValue={0}\n            type=\"number\"\n            max={this.maxSeconds}\n            min={0}\n            value={seconds}\n            onChange={this.onChangeSecField}\n            disabled={isStarted}\n          />\n        </Space>\n        <div className=\"countdown__slider\">\n          <Slider\n            tipFormatter={this.sliderFormatTip}\n            defaultValue={0}\n            max={maxSliderInSec}\n            step={this.sliderStep}\n            onChange={this.onSliderChange}\n            value={typeof timeInSec === 'number' ? timeInSec : 0}\n            disabled={isStarted}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nInputCountdown.defaultProps = {\n  maxTimeInMin: 720,\n  maxSeconds: 59,\n  sliderStep: 15,\n  maxSliderInSec: 3600,\n  timeInSec: 0,\n  startTimeInSec: 0,\n  isStarted: false,\n};\n\nInputCountdown.propTypes = {\n  updateTime: PropTypes.func.isRequired,\n  maxTimeInMin: PropTypes.number,\n  maxSeconds: PropTypes.number,\n  sliderStep: PropTypes.number,\n  maxSliderInSec: PropTypes.number,\n  timeInSec: PropTypes.number,\n  startTimeInSec: PropTypes.number,\n  isStarted: PropTypes.bool,\n};\n\nexport default InputCountdown;\n","import React from 'react';\nimport {\n  Button,\n  Space,\n  Divider,\n  Row,\n  Col,\n  Progress,\n} from 'antd';\n\nimport './Countdown.scss';\nimport InputCountdown from '../InputCountdown/InputCountdown';\n\nconst timerSound = require('../../sound/alarm.mp3');\n\nclass Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeInSec: 0,\n      isPlay: false,\n      isStarted: false,\n      startTimeInSec: 0,\n    };\n    this.countdownId = null;\n    this.timerSound = new Audio(timerSound);\n  }\n\n  countdown = () => {\n    const { timeInSec } = this.state;\n    if (timeInSec <= 0) {\n      clearInterval(this.countdownId);\n      this.setState({ isPlay: false, isStarted: false });\n      this.timerSound.play();\n    } else {\n      this.setState({ timeInSec: timeInSec - 1 });\n    }\n  };\n\n  onStartClick = () => {\n    const { isPlay } = this.state;\n    if (!isPlay) {\n      this.countdownId = setInterval(this.countdown, 1000);\n      this.setState({ isPlay: true, isStarted: true });\n    } else {\n      clearInterval(this.countdownId);\n      this.setState({ isPlay: false });\n    }\n  };\n\n  onResetClick = () => {\n    clearInterval(this.countdownId);\n    this.setState({\n      isPlay: false,\n      timeInSec: 0,\n      isStarted: false,\n      startTimeInSec: 0,\n    });\n  };\n\n  onChangeTime = (timeInSec) => {\n    this.setState({\n      timeInSec,\n      startTimeInSec: timeInSec,\n    });\n  };\n\n  getProgress = (timeInSec, startTimeInSec) => {\n    const onePercent = (startTimeInSec / 100);\n    return Math.trunc(100 - (timeInSec / onePercent));\n  };\n\n  timeView = (time) => ((time < 10) ? `0${time}` : time);\n\n  render() {\n    const {\n      timeInSec,\n      isPlay,\n      isStarted,\n      startTimeInSec,\n    } = this.state;\n    const minutes = Math.trunc(timeInSec / 60);\n    const seconds = timeInSec - minutes * 60;\n    const progress = (isStarted) ? this.getProgress(timeInSec, startTimeInSec) : 0;\n    const btnText = isPlay ? 'Pause' : 'Play';\n    return (\n      <div>\n        <Row gutter={[10, 10]}>\n          <Col span={10}>\n            <div className=\"countdown__timeview\">\n              {`${this.timeView(minutes)}:${this.timeView(seconds)}`}\n            </div>\n          </Col>\n          <Col span={14}>\n            <div className=\"countdown__progressBar\">\n              <Progress strokeLinecap=\"square\" percent={progress} />\n            </div>\n          </Col>\n        </Row>\n        <Divider />\n        <Row gutter={[10, 10]}>\n          <Col span={24}>\n            <div className=\"countdown__inputsBlock\">\n              <InputCountdown\n                updateTime={this.onChangeTime}\n                timeInSec={timeInSec}\n                isStarted={isStarted}\n                startTimeInSec={startTimeInSec}\n                maxTimeInMin={720}\n                maxSeconds={59}\n                sliderStep={15}\n              />\n            </div>\n          </Col>\n        </Row>\n        <Row gutter={[10, 10]}>\n          <Col span={24}>\n            <div className=\"countdown__btnBlock\">\n              <Space>\n                <Button\n                  type=\"primary\"\n                  className=\"countdown__btn\"\n                  onClick={this.onStartClick}\n                  disabled={!timeInSec}\n                >\n                  {btnText}\n                </Button>\n                <Button\n                  type=\"primary\"\n                  className=\"countdown__btn\"\n                  onClick={this.onResetClick}\n                  disabled={!timeInSec}\n                  danger\n                >\n                  Reset\n                </Button>\n              </Space>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './App.scss';\nimport { Tabs } from 'antd';\nimport Timer from '../Timer/Timer';\nimport Countdown from '../Countdown/Countdown';\n\nconst { TabPane } = Tabs;\n\nclass App extends React.Component {\n  state = {};\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Tabs defaultActiveKey=\"timer\">\n          <TabPane tab=\"Timer\" key=\"timer\">\n            <Timer />\n          </TabPane>\n          <TabPane tab=\"Countdown\" key=\"countdown\">\n            <Countdown />\n          </TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}